[build-system]
requires = ["flit_core >=3.3,<4,!=3.7"]
build-backend = "flit_core.buildapi"

[project]
name = "min_vers"
version = "0.1.0"
readme = "README.md"
requires-python = ">=3.11.0,<3.15"
license = {file = "LICENSE"}
authors = [ {name = "Faster Speeding", email="lucina@lmbyrne.dev"} ]
keywords = ["DI", "injection"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "License :: OSI Approved :: BSD License",
    "Intended Audience :: Developers",
    "Natural Language :: English",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Programming Language :: Python :: Implementation :: CPython",
    "Topic :: Utilities",
    "Typing :: Typed"
]
dependencies = [
    "pkginfo~=1.8.3",
    "pyproject-parser~=0.7.0",
    "requirements-parser~=0.5.0",
]
dynamic = ["description"]

[project.urls]
Homepage = "https://github.com/FasterSpeeding/min_vers"
Repository = "https://github.com/FasterSpeeding/min_vers"
Documentation = "https://github.com/FasterSpeeding/min_vers"
Changelog = "https://github.com/FasterSpeeding/min_vers/blob/master/CHANGELOG.md"

[dependency-groups]
docs = [
    "markdown-include>=0.8",
    "mkdocs>=1.4.2",
    "mkdocstrings[python]>=0.19",
    "mkdocs-material>=8.5.11",
    "mkdocs-minify-plugin>=0.6.4",
]
freeze-locks = ["uv"]
lint = [
    "codespell>=2.2.2",
    "pre-commit-hooks>=4.4",
    "slotscheck>=0.16.1",
    "ruff",
]
publish = ["flit>=3.8.0"]
reformat = [
    "black>=22.10.0",
    "isort>=5.11.3",
    "pre-commit-hooks>=4.4",
    "pycln>=2.1.2",
    "sort-all>=1.2",
]
templating = ["Jinja2>=3.1.2"]
tests = [
    "pytest>=7",
    "pytest-cov>=4",
    "pytest-sugar>=0.9.6",
    "pytest-timeout>=2.1",
    "pytest-xdist>=3.1",
]
type-checking = [
    "mypy>=0.991",
    "nox",
    "pyright>=1.1.285",
    {include-group = "tests"},
]

[tool.black]
line-length     = 120
target-version  = ["py311"]
include         = ".*pyi?$"

[tool.coverage.run]
concurrency = ["multiprocessing"]
parallel = true
branch = true
timid = false
source = ["min_vers"]

[tool.coverage.report]
precision = 2
show_missing = true
skip_covered = false
exclude_lines = [
    "^\\s*\\.\\.\\.$",
    "^\\s*@abc.abstractmethod$",
    "^if typing.TYPE_CHECKING:$"
]

[tool.isort]
profile = "black"
force_single_line = true

[tool.mypy]
# some good strict settings
strict = true
warn_unreachable = true

# more narrow type ignores
show_error_codes = true

# these are used by pyright
warn_unused_ignores = false
warn_redundant_casts = false

# compatibility with pyright
allow_redefinition = true

[tool.piped]
default_sessions = [
    "reformat",
    "verify-markup",
    "lint",
    "spell-check",
    "slot-check",
    "type-check",
    "test",
]
hide = ["generate-docs", "verify-types"]
project_name = "min_vers"
top_level_targets = ["./min_vers", "./noxfile.py", "./tests"]

[tool.piped.github_actions.freeze_for_pr]
[tool.piped.github_actions.lint]
[tool.piped.github_actions.publish]
[tool.piped.github_actions.py_test]
codeclimate_token = "6afbda1b66ce6caab04965d92bee9ab4b02afef58568c6402455b25032b8b865"
oses = "[ubuntu-latest]"
python_versions = ["3.11", "3.12", "3.13", "3.14-dev"]

[tool.piped.github_actions.reformat]
[tool.piped.github_actions.resync_piped]
[tool.piped.github_actions.type_check]
[tool.piped.github_actions.update_licence]
[tool.piped.github_actions.upgrade_locks]

[tool.pyright]
include = ["min_vers", "noxfile.py", "tests"]

pythonVersion = "3.11"
typeCheckingMode = "strict"
reportMissingModuleSource = "error"  # Is only "warning" on strict mode.

# Error code which are disabled even when general strict.
reportShadowedImports = "error"
reportCallInDefaultInitializer = "none"  # Ended up just complaining about cases where this was fine (e.g. timedeltas).
reportImplicitStringConcatenation = "none"  # Conflicts with flake8 config.
reportMissingSuperCall = "none"  # Way too strict (requires calls to `object.__init__`).
reportPropertyTypeMismatch = "error"
reportUninitializedInstanceVariable = "error"
reportUnnecessaryTypeIgnoreComment = "error"
reportUnusedCallResult = "none"  # Enforces doing `_ = ...`.

# Error codes which lead to too many false-positives.
reportUnknownMemberType = "warning"             # This messes with instance checking generic objects
reportUnknownArgumentType = "warning"           # Pretty much the same as reportUnknownMemberType
reportImportCycles = "warning"                  # This isn't necessarily an issue if it's type checking only.
reportUnknownVariableType = "warning"           # Lotta false-positives, might fix/change later.

[tool.pytest.ini_options]
testpaths = ["tests"]
timeout = 15
required_plugins = []
filterwarnings = ["error"]

[tool.ruff.lint]
select = ["ALL"]
ignore = [
    "ANN401",  # Dynamically typed expressions (typing.Any) are disallowed in ``
    "COM812",  # Trailing comma missing (incompatible with black)
    "D102",    # Missing docstring in public method
    "D105",    # Missing docstring in magic method
    "FIX002",  # Line contains TODO, consider resolving the issue
    "I001",    # [*] Import block is un-sorted or un-formatted
    "N818",    # Exception name `FailedModuleUnload` should be named with an Error suffix
    "PGH003",  # Use specific rule codes when ignoring type issues
    "PYI041",  # Use `float` instead of `int | float`
    "S101",    # Use of `assert` detected
    "SIM105",  # Use `contextlib.suppress(Error)` instead of `try`-`except`-`pass`
    "SIM108",  # Use ternary operator `` instead of `if`-`else`-block
    "TD002",   # Missing author in TODO; try: `# TODO(<author_name>): ...` or `# TODO @<author_name>: ...`
    "TD003",   # Missing issue link on the line following this TODO
]

[tool.ruff.lint.per-file-ignores]
"noxfile.py" = [
    "F403",  # `from noxfile import *` used; unable to detect undefined name
]
"tests/**/*.py" = [
    "D100",     # Missing docstring in public module
    "D101",     # Missing docstring in public class
    "D102",     # Missing docstring in public method
    "D103",     # Missing docstring in public function
    "D104",     # Missing docstring in public package
    "FBT001",   # Boolean-typed positional argument in function definition
    "FBT002",   # Boolean default positional argument in function definition
    "FBT003",   # Boolean positional value in function call
    "PLR0915",  # Too many statements
    "PLR2004",  # Magic value used in comparison, consider replacing `` with a constant variable
    "SLF001",   # Private member accessed: ``
]

[tool.ruff.lint.mccabe]
max-complexity = 20

[tool.ruff.lint.pycodestyle]
# Technically this is 120, but black has a policy of "1 or 2 over is fine if it is tidier", so we have to raise this.
max-line-length = 130

[tool.ruff.lint.pydocstyle]
convention = "numpy"

[tool.ruff.lint.pylint]
max-args = 20
max-branches = 20
max-returns = 15
max-statements = 100

[tool.slotscheck]
strict-imports = true
require-superclass = true
require-subclass = true

[tool.uv]
reinstall-package = ["min_vers"]
